# # auto detects a good number of processes to run
# # this is only valid inside the nginx.conf, I believe - NOT default.conf
worker_processes auto;

# # this is possibly the same as well. 
# #Provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 8000;
    # Tells the worker to accept multiple connections at a time
    multi_accept on;
}

# so http does not work when used in default.conf, but does work in nginx.conf
http {
    server_tokens off;

    sendfile        on;
    tcp_nopush      on;

    tcp_nodelay     off;

    # Enable Gzip compressed.
    gzip on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
    gzip_http_version  1.0;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
      application/atom+xml
      application/javascript
      application/json
      application/rss+xml
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/svg+xml
      image/x-icon
      text/css
      text/plain
      text/x-component;
    # text/html is always compressed by HttpGzipModule

    # what times to include
    include       /etc/nginx/mime.types;
    # what is the default one
    default_type  application/octet-stream;

    # Sets the path, format, and configuration for a buffered log write
    log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent"';

    server {
        # listen on port 80
        listen 80;
        listen [::]:80;
        server_name watashiengine.com www.watashiengine.com;

        # # save logs here
        # access_log /var/log/nginx/access.log compression;

        # # where the root here
        # root /usr/share/nginx/html;
        # # what file to server as index
        # index index.html index.htm;

        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
            expires -1;
            # access_log logs/static.log; # I don't usually include a static log
        }

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to redirecting to index.html
            # try_files $uri $uri/ /index.html;
            # rewrite ^ https://$host$request_uri? permanent;
          return 301 https://watashiengine.com$request_uri;
        }

        # for certbot challenges
        location ~ /.well-known/acme-challenge {
            allow all;
            root /data/letsencrypt;
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
          expires 1M;
          access_log off;
          add_header Cache-Control "public";
        }

        # Javascript and CSS files
        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # Any route containing a file extension (e.g. /devicesfile.js)
        location ~ ^.+\..+$ {
            try_files $uri =404;
        }
    }

  # https://watashiengine.com
  server {
      listen 443 ssl http2;
      listen [::]:443 ssl http2;
      server_name watashiengine.com;

      server_tokens off;

      ssl_certificate /etc/letsencrypt/live/watashiengine.com/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/watashiengine.com/privkey.pem;

      ssl_buffer_size 8k;

      ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

      ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
      ssl_prefer_server_ciphers on;

      ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

      ssl_ecdh_curve secp384r1;
      ssl_session_tickets off;

      # OCSP stapling
      ssl_stapling on;
      ssl_stapling_verify on;
      resolver 8.8.8.8 8.8.4.4;

      root /usr/share/nginx/html;
      index index.html;

      location / {
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        #CSP
        add_header Content-Security-Policy "frame-src 'self'; default-src 'self'; script-src 'self' 'unsafe-inline' https://maxcdn.bootstrapcdn.com https://ajax.googleapis.com; img-src 'self'; style-src 'self' https://maxcdn.bootstrapcdn.com; font-src 'self' data: https://maxcdn.bootstrapcdn.com; form-action 'self'; upgrade-insecure-requests;" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        try_files $uri $uri/ /index.html;
      }

  }

  # https://www.watashiengine.com
  server {
      server_name www.watashiengine.com;
      listen 443 ssl http2;
      listen [::]:443 ssl http2;

      server_tokens off;

      ssl_buffer_size 8k;
      ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

      ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
      ssl_prefer_server_ciphers on;
      ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

      ssl_ecdh_curve secp384r1;
      ssl_session_tickets off;

      # OCSP stapling
      ssl_stapling on;
      ssl_stapling_verify on;
      resolver 8.8.8.8;

      ssl_certificate /etc/letsencrypt/live/watashiengine.com/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/watashiengine.com/privkey.pem;

      location / {
        return 301 https://watashiengine.com$request_uri;
      }
  }
}
