version: '3'
services:
  postgres:
    image: postgres:alpine
    ports:
      - 5432:5432
    expose: 
      - 5432
    volumes:
      - ./watashi-postgres:/var/lib/postgresql/data:rw
    restart: always

  haproxy:
  # image: dockercloud/haproxy
  # build:
    # context: ./watashi-haproxy
    # dockerfile: ./infrastructure/docker/DockerfileHaproxy
    depends_on:
      - nginx
    environment:
      - BALANCE=leastconn
      - ADDITIONAL_SERVICES=project_dir:app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - /etc/haproxy:/usr/local/etc/haproxy:ro
    ports:
      - 12001:80
  #   - 80:80
    restart: always

    networks:
      - web
    deploy:
      placement:
        constraints: [node.role == manager]

  nginx: 
    build:
      context: ./watashi-nginx
      dockerfile: ./infrastructure/docker/DockerfileNginx
    ports:
      - 5000:80
      - 4000:80
    expose: 
      - 80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:rw
    depends_on:
      - nginxproxy
    restart: always

  api:
    build:
      context: ./watashi-api
      dockerfile: ./infrastructure/docker/DockerfileAPI
    volumes:
      - ./watashi-api:/usr/src/app/api:rw
    ports:
      - 4000:4000
    expose: 
      - 4000
    depends_on:
      - nginx
      - postgres

  client:
    build:
      context: ./watashi-client
      dockerfile: ./infrastructure/docker/DockerfileClient
    volumes:
      - ./watashi-client:/usr/src/app/client:rw
    ports:
      - 5000:5000
    expose: 
      - 5000      
    depends_on:
      - nginx
    # deploy:
    #   replicas: 3
    #   restart_policy:
    #    condition: on-failure
    #    max_attempts: 3
    #    window: 120s
    # networks:
    #   - web

# Overlay network that the services and the HAProxy exists in.
# networks:
#   web:
#     driver: overlay
